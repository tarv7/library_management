---
openapi: 3.0.1
info:
  title: Library Management API
  version: v1
  description: API for managing library books, users and reservations
paths:
  "/api/v1/auth":
    post:
      summary: User authentication
      tags:
      - Authentication
      description: Authenticates a user with email and password, returns JWT token
        on success
      parameters: []
      responses:
        '201':
          description: Authentication successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthToken"
        '401':
          description: Empty credentials
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthError"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  "$ref": "#/components/schemas/LoginInput"
              required:
              - user
  "/api/v1/books/{book_id}/reservations":
    parameters:
    - name: book_id
      in: path
      description: Book ID
      required: true
      schema:
        type: integer
    post:
      summary: Create a book reservation
      tags:
      - Reservations
      description: Creates a new reservation for a book. Only members can create reservations.
        Each member can only have one active reservation per book.
      security:
      - bearerAuth: []
      responses:
        '201':
          description: Reservation created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Reservation"
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '422':
          description: No available copies
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReservationError"
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
  "/api/v1/books/{book_id}/reservations/{id}":
    parameters:
    - name: book_id
      in: path
      description: Book ID
      required: true
      schema:
        type: integer
    - name: id
      in: path
      description: Reservation ID
      required: true
      schema:
        type: integer
    put:
      summary: Return a reserved book
      tags:
      - Reservations
      description: Marks a reservation as returned. Only librarians can perform this
        action.
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Book returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Reservation"
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '404':
          description: Reservation not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
  "/api/v1/books":
    get:
      summary: List all books
      tags:
      - Books
      description: Retrieves a list of all books. Supports search filters for title,
        author, and genre.
      security:
      - bearerAuth: []
      parameters:
      - name: title
        in: query
        required: false
        description: Filter by book title (partial match)
        schema:
          type: string
      - name: author
        in: query
        required: false
        description: Filter by author name (partial match)
        schema:
          type: string
      - name: genre
        in: query
        required: false
        description: "Filter by genre:\n * `fiction` \n * `non_fiction` \n * `mystery`
          \n * `science_fiction` \n * `fantasy` \n * `romance` \n * `thriller` \n
          * `biography` \n * `history` \n * `poetry` \n * `drama` \n "
        enum:
        - fiction
        - non_fiction
        - mystery
        - science_fiction
        - fantasy
        - romance
        - thriller
        - biography
        - history
        - poetry
        - drama
        schema:
          type: string
      responses:
        '200':
          description: Books retrieved successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BooksArray"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
    post:
      summary: Create a new book
      tags:
      - Books
      description: Creates a new book in the library. Only librarians can create books.
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Book"
        '401':
          description: Unauthorized - Only librarians can create books
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                book:
                  "$ref": "#/components/schemas/BookInput"
              required:
              - book
  "/api/v1/books/{id}":
    parameters:
    - name: id
      in: path
      description: Book ID
      required: true
      schema:
        type: integer
    get:
      summary: Show a book
      tags:
      - Books
      description: Retrieves details of a specific book
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Book"
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
    put:
      summary: Update a book
      tags:
      - Books
      description: Updates a book. Only librarians can update books.
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Book"
        '401':
          description: Unauthorized - Only librarians can update books
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                book:
                  "$ref": "#/components/schemas/BookInput"
              required:
              - book
    delete:
      summary: Delete a book
      tags:
      - Books
      description: Deletes a book from the library. Only librarians can delete books.
      security:
      - bearerAuth: []
      responses:
        '204':
          description: Book deleted successfully
        '401':
          description: Unauthorized - Only librarians can delete books
  "/api/v1/reservations":
    get:
      summary: List all reservations
      tags:
      - Reservations
      description: Returns a list of all reservations in the system. Only accessible
        by librarians. Supports filtering by book_id, user_id, and situation.
      parameters:
      - name: book_id
        in: query
        required: false
        description: Filter reservations by book ID
        schema:
          type: integer
      - name: user_id
        in: query
        required: false
        description: Filter reservations by user ID
        schema:
          type: integer
      - name: situation
        in: query
        required: false
        description: "Filter reservations by status:\n * `not_returned` \n * `returned`
          \n * `overdue` \n * `due_today` \n "
        enum:
        - not_returned
        - returned
        - overdue
        - due_today
        schema:
          type: string
      security:
      - bearerAuth: []
      responses:
        '200':
          description: filtered reservations by situation
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservations:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        book_id:
                          type: integer
                          example: 1
                        user_id:
                          type: integer
                          example: 2
                        borrowed_on:
                          type: string
                          format: date
                          example: '2025-09-18'
                        due_on:
                          type: string
                          format: date
                          example: '2025-10-02'
                        returned_at:
                          type: string
                          format: date-time
                          nullable: true
                          example: '2025-09-25T10:30:00.000Z'
                        created_at:
                          type: string
                          format: date-time
                          example: '2025-09-18T10:30:00.000Z'
                        updated_at:
                          type: string
                          format: date-time
                          example: '2025-09-18T10:30:00.000Z'
                        book:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            title:
                              type: string
                              example: To Kill a Mockingbird
                            author:
                              type: string
                              example: Harper Lee
                            isbn:
                              type: string
                              example: '9780061120084'
                            genre:
                              type: string
                              example: fiction
                            total_copies:
                              type: integer
                              example: 3
                          required:
                          - id
                          - title
                          - author
                          - isbn
                          - genre
                          - total_copies
                        user:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 2
                            name:
                              type: string
                              example: John Doe
                            email_address:
                              type: string
                              example: john.doe@example.com
                            role:
                              type: string
                              example: member
                          required:
                          - id
                          - name
                          - email_address
                          - role
                        status:
                          type: string
                          enum:
                          - not_returned
                          - returned
                          - overdue
                          - due_today
                          example: not_returned
                      required:
                      - id
                      - book_id
                      - user_id
                      - borrowed_on
                      - due_on
                      - book
                      - user
                      - status
                  metadata:
                    type: object
                    properties:
                      total_count:
                        type: integer
                        example: 15
                      filters:
                        type: object
                        properties:
                          book_id:
                            type: string
                            example: '1'
                          user_id:
                            type: string
                            example: '2'
                          situation:
                            type: string
                            example: overdue
                      statistics:
                        type: object
                        properties:
                          active_count:
                            type: integer
                            example: 8
                          returned_count:
                            type: integer
                            example: 5
                          overdue_count:
                            type: integer
                            example: 2
                          due_today_count:
                            type: integer
                            example: 0
                        required:
                        - active_count
                        - returned_count
                        - overdue_count
                        - due_today_count
                    required:
                    - total_count
                    - statistics
                required:
                - reservations
                - metadata
        '401':
          description: unauthorized - no token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized access
  "/api/v1/users/librarians/dashboard":
    get:
      summary: Get librarian dashboard
      tags:
      - Librarian Dashboard
      description: Retrieves comprehensive dashboard information for librarians including
        library statistics, books due today, and members with overdue books. Only
        accessible by librarians.
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Dashboard with minimal data
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LibrarianDashboard"
        '401':
          description: Unauthorized - Missing token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
  "/api/v1/users/members/dashboard":
    get:
      summary: Get member dashboard
      tags:
      - Member Dashboard
      description: Retrieves dashboard information for a member including borrowed
        books, overdue books, and summary statistics. Only accessible by members.
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Dashboard with no borrowed books
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MemberDashboard"
        '401':
          description: Unauthorized - Missing token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
  "/api/v1/users/members":
    get:
      summary: List all members
      tags:
      - Users
      description: Returns a list of all members in the system. Only accessible by
        librarians.
      security:
      - bearerAuth: []
      responses:
        '200':
          description: members found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Alice Johnson
                    email_address:
                      type: string
                      example: alice.johnson@example.com
                    role:
                      type: string
                      example: member
                      enum:
                      - member
                    created_at:
                      type: string
                      format: date-time
                      example: '2025-09-18T10:30:00.000Z'
                    updated_at:
                      type: string
                      format: date-time
                      example: '2025-09-18T10:30:00.000Z'
                  required:
                  - id
                  - name
                  - email_address
                  - role
                  - created_at
                  - updated_at
        '401':
          description: unauthorized - no token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Not Authorized
  "/api/v1/users":
    post:
      summary: Create a new user
      tags:
      - Users
      description: Creates a new user with the provided information. Can create both
        member and librarian users.
      parameters: []
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  email_address:
                    type: string
                    format: email
                    example: user@example.com
                  name:
                    type: string
                    example: John Doe
                  role:
                    type: string
                    enum:
                    - member
                    - librarian
                    example: member
        '422':
          description: Email already taken
          content:
            application/json:
              schema:
                type: object
                properties:
                  email_address:
                    type: array
                    items:
                      type: string
                  password:
                    type: array
                    items:
                      type: string
                  name:
                    type: array
                    items:
                      type: string
                  role:
                    type: array
                    items:
                      type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  "$ref": "#/components/schemas/UserInput"
              required:
              - user
servers:
- url: http://localhost:3000
  description: Development server
- url: https://library-management-back-e6f3cf925e79.herokuapp.com
  description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email_address:
          type: string
          format: email
          example: user@example.com
        name:
          type: string
          example: John Doe
        role:
          type: string
          enum:
          - member
          - librarian
          example: member
      required:
      - email_address
      - name
      - role
    UserInput:
      type: object
      properties:
        email_address:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 6
          example: password123
        password_confirmation:
          type: string
          minLength: 6
          example: password123
        name:
          type: string
          example: John Doe
        role:
          type: string
          enum:
          - member
          - librarian
          example: member
      required:
      - email_address
      - password
      - password_confirmation
      - name
      - role
    LoginInput:
      type: object
      properties:
        email_address:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          example: password123
      required:
      - email_address
      - password
    AuthToken:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE3MzI3NTQ4ODF9.abc123
    AuthError:
      type: object
      properties:
        error:
          type: string
          example: Invalid email or password
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: The Great Gatsby
        author:
          type: string
          example: F. Scott Fitzgerald
        genre:
          type: string
          enum:
          - fiction
          - non_fiction
          - mystery
          - science_fiction
          - fantasy
          - romance
          - thriller
          - biography
          - history
          - poetry
          - drama
          example: fiction
        isbn:
          type: string
          example: 978-0-7432-7356-5
        total_copies:
          type: integer
          example: 5
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        url:
          type: string
          format: uri
          example: http://localhost:3000/api/v1/books/1.json
    BookInput:
      type: object
      properties:
        title:
          type: string
          minLength: 2
          maxLength: 255
          example: The Great Gatsby
        author:
          type: string
          minLength: 2
          maxLength: 255
          example: F. Scott Fitzgerald
        genre:
          type: string
          enum:
          - fiction
          - non_fiction
          - mystery
          - science_fiction
          - fantasy
          - romance
          - thriller
          - biography
          - history
          - poetry
          - drama
          example: fiction
        isbn:
          type: string
          example: 978-0-7432-7356-5
        total_copies:
          type: integer
          minimum: 0
          example: 5
      required:
      - title
      - author
      - genre
      - isbn
      - total_copies
    BooksArray:
      type: array
      items:
        "$ref": "#/components/schemas/Book"
    Reservation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        book_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        borrowed_on:
          type: string
          format: date
          example: '2025-09-28'
        due_on:
          type: string
          format: date
          example: '2025-10-12'
        returned_at:
          type: string
          format: date-time
          nullable: true
          example: '2025-10-10T10:30:00Z'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ReservationError:
      type: object
      properties:
        book:
          type: array
          items:
            type: string
          example:
          - is already borrowed
          - has no available copies
    MemberDashboard:
      type: object
      properties:
        member:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: John Doe
            email_address:
              type: string
              format: email
              example: john@example.com
        borrowed_books:
          type: array
          items:
            type: object
            properties:
              reservation_id:
                type: integer
                example: 1
              borrowed_on:
                type: string
                format: date
                example: '2025-09-28'
              due_on:
                type: string
                format: date
                example: '2025-10-12'
              book:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: The Great Gatsby
                  author:
                    type: string
                    example: F. Scott Fitzgerald
                  isbn:
                    type: string
                    example: 978-0-7432-7356-5
                  genre:
                    type: string
                    example: fiction
        overdue_books:
          type: array
          items:
            type: object
            properties:
              reservation_id:
                type: integer
                example: 2
              borrowed_on:
                type: string
                format: date
                example: '2025-09-01'
              due_on:
                type: string
                format: date
                example: '2025-09-15'
              days_overdue:
                type: integer
                example: 13
              book:
                type: object
                properties:
                  id:
                    type: integer
                    example: 2
                  title:
                    type: string
                    example: '1984'
                  author:
                    type: string
                    example: George Orwell
                  isbn:
                    type: string
                    example: 978-0-452-28423-4
                  genre:
                    type: string
                    example: science_fiction
        summary:
          type: object
          properties:
            total_borrowed_books:
              type: integer
              example: 3
            total_overdue_books:
              type: integer
              example: 1
    LibrarianDashboard:
      type: object
      properties:
        librarian:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: Jane Smith
            email_address:
              type: string
              format: email
              example: librarian@example.com
        statistics:
          type: object
          properties:
            total_books:
              type: integer
              example: 150
            total_borrowed_books:
              type: integer
              example: 45
            books_due_today_count:
              type: integer
              example: 3
            members_with_overdue_books_count:
              type: integer
              example: 5
        books_due_today:
          type: array
          items:
            type: object
            properties:
              reservation_id:
                type: integer
                example: 1
              borrowed_on:
                type: string
                format: date
                example: '2025-09-14'
              due_on:
                type: string
                format: date
                example: '2025-09-28'
              member:
                type: object
                properties:
                  id:
                    type: integer
                    example: 2
                  name:
                    type: string
                    example: John Doe
                  email_address:
                    type: string
                    format: email
                    example: john@example.com
              book:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: The Great Gatsby
                  author:
                    type: string
                    example: F. Scott Fitzgerald
                  isbn:
                    type: string
                    example: 978-0-7432-7356-5
                  genre:
                    type: string
                    example: fiction
        members_with_overdue_books:
          type: array
          items:
            type: object
            properties:
              member_id:
                type: integer
                example: 3
              member_name:
                type: string
                example: Alice Johnson
              member_email:
                type: string
                format: email
                example: alice@example.com
              overdue_books:
                type: array
                items:
                  type: object
                  properties:
                    reservation_id:
                      type: integer
                      example: 5
                    borrowed_on:
                      type: string
                      format: date
                      example: '2025-09-01'
                    due_on:
                      type: string
                      format: date
                      example: '2025-09-15'
                    days_overdue:
                      type: integer
                      example: 13
                    book:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 2
                        title:
                          type: string
                          example: '1984'
                        author:
                          type: string
                          example: George Orwell
                        isbn:
                          type: string
                          example: 978-0-452-28423-4
                        genre:
                          type: string
                          example: science_fiction
    Error:
      type: object
      properties:
        error:
          type: string
          example: Validation failed
